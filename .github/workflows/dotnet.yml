# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Debug - Verify Repo Structure
#         run: ls -R  ✅ Check files before proceeding

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Install Docker Compose
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y docker-compose

#       - name: Log in to Docker Hub
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#         run: |
#           if [[ -z "$DOCKER_USERNAME" || -z "$DOCKER_PASSWORD" ]]; then
#             echo "Missing Docker credentials!"
#             exit 1
#           fi
#           echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v4
#         with:
#           dotnet-version: 8.0.x

#       - name: Restore dependencies
#         run: dotnet restore

#       - name: Build .NET Projects
#         run: dotnet build --no-restore

#       - name: Test .NET Projects
#         run: dotnet test --no-build --verbosity normal

#       - name: Build and Push Docker Images with Docker Compose
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#         run: |
#           docker-compose build
#           docker tag back-end_apigateway:latest $DOCKER_USERNAME/apigateway:latest
#           docker tag back-end_usermanagement:latest $DOCKER_USERNAME/usermanagement:latest
#           docker push $DOCKER_USERNAME/apigateway:latest
#           docker push $DOCKER_USERNAME/usermanagement:latest

 
name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x  Ensure .NET is installed before building

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.dckr_pat_vbf_IxOXz6MdB4TwPXupWGRX760 }}" | docker login -u "${{ secrets.cedje }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker-compose build
          docker tag back-end_apigateway:latest $DOCKER_USERNAME/apigateway:latest
          docker tag back-end_usermanagement:latest $DOCKER_USERNAME/usermanagement:latest
          docker push $DOCKER_USERNAME/apigateway:latest
          docker push $DOCKER_USERNAME/usermanagement:latest
# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

# name: .NET

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: 8.0.x
#     - name: Restore dependencies
#       run: dotnet restore
#     - name: Build
#       run: dotnet build --no-restore
#     - name: Test
#       run: dotnet test --no-build --verbosity normal
 