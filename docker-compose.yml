version: '3.8'

services:
  apigateway:
    build:
      context: ./ApiGateway 
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    depends_on:
      - usermanagement
    networks:
      - backend

  usermanagement:
    build:
      context: ./UserManagement  
      dockerfile: Dockerfile    
    ports:
      - "5001:80"
    networks:
      - backend
  tweetmanagement:
    build:
      context: ./TweetManagement  
      dockerfile: Dockerfile    
    ports:
      - "5002:80"
    networks:
      - backend
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    ports:
      - "9092:29092"  
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend
  
  analytics-service:
    build:
      context: ./AnalyticsService
    depends_on:
      - kafka
    restart: always

networks:
  backend:
    driver: bridge
